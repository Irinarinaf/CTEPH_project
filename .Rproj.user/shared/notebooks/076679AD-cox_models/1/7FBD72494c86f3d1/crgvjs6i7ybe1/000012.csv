"0","data_imp <- readRDS(""data/imputation_result_all.rds"")"
"0",""
"0","all_sets <- lapply(1:10, function(x) complete(data_imp , x))"
"0","final <- lapply(all_sets, function(x) select(x, !c(clin_det_count, OS1)))"
"0","final <- lapply(final, function(x) mutate(x, TTCD_event = as.numeric(TTCD_event)))"
"0",""
"0","vars_for_table <- colnames(final[[1]]%>%select(ends_with(""Cat0"")|ends_with(""Cat1"")|ends_with(""Num0"")|ends_with(""Cat2"")|ends_with(""Num1"")))"
"0","                          "
"0","length(vars_for_table)"
"1","[1]"
"1"," 75"
"1","
"
"0","univ_formulas <- sapply(vars_for_table[2:length(vars_for_table)], function(x) as.formula(paste('Surv(TTCD, TTCD_event) ~', x)))"
"0",""
"0",""
"0","table0 <- data.frame()"
"0","for (form in univ_formulas){"
"0","  models <- lapply(final, function(x) {coxph(form, data = x)})"
"0","  table0 <- bind_rows(table0, tidy(pool(models)))"
"0","}"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"2","Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights,  :"
"2","
 "
"2"," Loglik converged before variable  1,2 ; coefficient may be infinite. 
"
"0","table0 <- table0 %>%"
"0","  arrange(p.value)%>%"
"0","  mutate("
"0","          HR = exp(estimate),"
"0","          lower_95 = exp(estimate - 1.96 * std.error),"
"0","          upper_95 = exp(estimate + 1.96 * std.error),"
"0","          HR_with_CI = paste0("
"0","            round(HR, 2), "
"0","            "" ("", "
"0","            round(lower_95, 2), "
"0","            ""-"", "
"0","            round(upper_95, 2), "
"0","            "")"""
"0","          ),"
"0","          raw_p_value = ifelse(p.value == ""N.A."", NA, round(as.numeric(p.value), 2)),"
"0","          adj_p_value = round(p.adjust(as.numeric(p.value), method = ""BH""), 2)"
"0","        )"
"0",""
"0",""
"0",""
"0","# Данные для графика"
"0","forest_data_plot <- table0 %>%"
"0","  filter((lower_95 < 1 & upper_95 <1)|(lower_95 > 1 & upper_95 >1))%>%"
"0","  mutate("
"0","    HR = as.numeric(sub("" .*"", """", HR_with_CI)), # Извлекаем HR"
"0","    lower_95 = as.numeric(sub("".*\\((.*)-.*\\)"", ""\\1"", HR_with_CI)), # Извлекаем lower CI"
"0","    upper_95 = as.numeric(sub("".*-(.*)\\)"", ""\\1"", HR_with_CI)),      # Извлекаем upper CI"
"0","    p_and_adj_p = paste0(""p: "", raw_p_value, ""; adj: "", adj_p_value)      # Объединяем p-value"
"0","  ) %>%"
"0","  arrange(p.value)"
"0",""
"0","# Таблица для подписи"
"0","labeltext <- rbind("
"0","  c(""Covariate"", ""HR (95% CI)"", ""P-values""),  # Добавляем колонку для p-values"
"0","  forest_data_plot %>% select(term, HR_with_CI, p_and_adj_p) %>% as.matrix()"
"0",")"
"0",""
"0","# Значения для Forest Plot"
"0","mean_values <- forest_data_plot$HR"
"0","lower_values <- forest_data_plot$lower_95"
"0","upper_values <- forest_data_plot$upper_95"
"0",""
"0",""
"0","forestplot::forestplot("
"0","  labeltext = labeltext,"
"0","  mean = c(NA, mean_values),"
"0","  lower = c(NA, lower_values),"
"0","  upper = c(NA, upper_values),"
"0","  xlog = TRUE,"
"0","  xlim = c(0.01, 100),                   # Настройка диапазона оси X"
"0","  title = ""Forest Plot for Time-Independent Cox Models for Deterioration-free Survival (top models)"","
"0","  new_page = TRUE,"
"0","  is.summary = c(TRUE, rep(FALSE, nrow(forest_data_plot))),"
"0","  boxsize = 0.2,"
"0","  col = fpColors(box = ""darkblue"", line = ""black"", summary = ""darkblue""),"
"0","  txt_gp = fpTxtGp(label = gpar(cex = 0.8), ticks = gpar(cex = 0.7), xlab = gpar(cex = 0.8)),"
"0","  align = ""l"",                        # Выравнивание текста слева"
"0","  clip = c(0.01, 100),                   # Обрезка значений"
"0","  graph.pos = 2)  "
